import { Bishop } from '../../models/pieces/bishop';
import { Color } from '../../models/pieces/color';
import { King } from '../../models/pieces/king';
import { Knight } from '../../models/pieces/knight';
import { Pawn } from '../../models/pieces/pawn';
import { Point } from '../../models/pieces/point';
import { Queen } from '../../models/pieces/queen';
import { Rook } from '../../models/pieces/rook';
import { ColorInput, PieceTypeInput } from '../../utils/inputs/piece-type-input';
import { UnicodeConstants } from '../../utils/unicode-constants';
export class PieceFactory {
    static create(indexes, pieceTypeInput, colorInput, board) {
        let piece;
        let color = colorInput === ColorInput.LIGHT
            ? Color.WHITE
            : Color.BLACK;
        switch (pieceTypeInput) {
            case PieceTypeInput.QUEEN:
                piece = new Queen(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_QUEEN : UnicodeConstants.BLACK_QUEEN, board);
                break;
            case PieceTypeInput.KING:
                piece = new King(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_KING : UnicodeConstants.BLACK_KING, board);
                break;
            case PieceTypeInput.KNIGHT:
                piece = new Knight(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_KNIGHT : UnicodeConstants.BLACK_KNIGHT, board);
                break;
            case PieceTypeInput.BISHOP:
                piece = new Bishop(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_BISHOP : UnicodeConstants.BLACK_BISHOP, board);
                break;
            case PieceTypeInput.ROOK:
                piece = new Rook(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_ROOK : UnicodeConstants.BLACK_ROOK, board);
                break;
            case PieceTypeInput.PAWN:
                piece = new Pawn(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_PAWN : UnicodeConstants.BLACK_PAWN, board);
                break;
        }
        return piece;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGllY2UtZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1jaGVzcy1ib2FyZC9zcmMvbGliL2VuZ2luZS91dGlscy9waWVjZS1mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDbEQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFaEQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDaEQsT0FBTyxFQUNILFVBQVUsRUFDVixjQUFjLEVBQ2pCLE1BQU0scUNBQXFDLENBQUM7QUFDN0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFFakUsTUFBTSxPQUFPLFlBQVk7SUFFckIsTUFBTSxDQUFDLE1BQU0sQ0FDVCxPQUF3QixFQUN4QixjQUE4QixFQUM5QixVQUFzQixFQUN0QixLQUFZO1FBRVosSUFBSSxLQUFLLENBQUM7UUFDVixJQUFJLEtBQUssR0FBRyxVQUFVLEtBQUssVUFBVSxDQUFDLEtBQUs7WUFDdkMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLO1lBQ2IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFFbEIsUUFBUSxjQUFjLEVBQUU7WUFDcEIsS0FBSyxjQUFjLENBQUMsS0FBSztnQkFDckIsS0FBSyxHQUFHLElBQUksS0FBSyxDQUNiLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUN2QyxLQUFLLEVBQ0wsS0FBSyxLQUFLLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUNuRixLQUFLLENBQ1IsQ0FBQztnQkFDRixNQUFNO1lBQ1YsS0FBSyxjQUFjLENBQUMsSUFBSTtnQkFDcEIsS0FBSyxHQUFHLElBQUksSUFBSSxDQUNaLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUN2QyxLQUFLLEVBQ0wsS0FBSyxLQUFLLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUNqRixLQUFLLENBQ1IsQ0FBQztnQkFFRixNQUFNO1lBQ1YsS0FBSyxjQUFjLENBQUMsTUFBTTtnQkFDdEIsS0FBSyxHQUFHLElBQUksTUFBTSxDQUNkLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUN2QyxLQUFLLEVBQ0wsS0FBSyxLQUFLLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUNyRixLQUFLLENBQ1IsQ0FBQztnQkFDRixNQUFNO1lBQ1YsS0FBSyxjQUFjLENBQUMsTUFBTTtnQkFDdEIsS0FBSyxHQUFHLElBQUksTUFBTSxDQUNkLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUN2QyxLQUFLLEVBQ0wsS0FBSyxLQUFLLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUNyRixLQUFLLENBQ1IsQ0FBQztnQkFDRixNQUFNO1lBQ1YsS0FBSyxjQUFjLENBQUMsSUFBSTtnQkFDcEIsS0FBSyxHQUFHLElBQUksSUFBSSxDQUNaLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUN2QyxLQUFLLEVBQ0wsS0FBSyxLQUFLLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUNqRixLQUFLLENBQ1IsQ0FBQztnQkFDRixNQUFNO1lBQ1YsS0FBSyxjQUFjLENBQUMsSUFBSTtnQkFDcEIsS0FBSyxHQUFHLElBQUksSUFBSSxDQUNaLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUN2QyxLQUFLLEVBQ0wsS0FBSyxLQUFLLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUNqRixLQUFLLENBQ1IsQ0FBQztnQkFDRixNQUFNO1NBQ2I7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb2FyZCB9IGZyb20gJy4uLy4uL21vZGVscy9ib2FyZCc7XHJcbmltcG9ydCB7IE1vdmVUcmFuc2xhdGlvbiB9IGZyb20gJy4uLy4uL21vZGVscy9tb3ZlLXRyYW5zbGF0aW9uJztcclxuaW1wb3J0IHsgQmlzaG9wIH0gZnJvbSAnLi4vLi4vbW9kZWxzL3BpZWNlcy9iaXNob3AnO1xyXG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJy4uLy4uL21vZGVscy9waWVjZXMvY29sb3InO1xyXG5pbXBvcnQgeyBLaW5nIH0gZnJvbSAnLi4vLi4vbW9kZWxzL3BpZWNlcy9raW5nJztcclxuaW1wb3J0IHsgS25pZ2h0IH0gZnJvbSAnLi4vLi4vbW9kZWxzL3BpZWNlcy9rbmlnaHQnO1xyXG5pbXBvcnQgeyBQYXduIH0gZnJvbSAnLi4vLi4vbW9kZWxzL3BpZWNlcy9wYXduJztcclxuaW1wb3J0IHsgUGllY2UgfSBmcm9tICcuLi8uLi9tb2RlbHMvcGllY2VzL3BpZWNlJztcclxuaW1wb3J0IHsgUG9pbnQgfSBmcm9tICcuLi8uLi9tb2RlbHMvcGllY2VzL3BvaW50JztcclxuaW1wb3J0IHsgUXVlZW4gfSBmcm9tICcuLi8uLi9tb2RlbHMvcGllY2VzL3F1ZWVuJztcclxuaW1wb3J0IHsgUm9vayB9IGZyb20gJy4uLy4uL21vZGVscy9waWVjZXMvcm9vayc7XHJcbmltcG9ydCB7XHJcbiAgICBDb2xvcklucHV0LFxyXG4gICAgUGllY2VUeXBlSW5wdXRcclxufSBmcm9tICcuLi8uLi91dGlscy9pbnB1dHMvcGllY2UtdHlwZS1pbnB1dCc7XHJcbmltcG9ydCB7IFVuaWNvZGVDb25zdGFudHMgfSBmcm9tICcuLi8uLi91dGlscy91bmljb2RlLWNvbnN0YW50cyc7XHJcblxyXG5leHBvcnQgY2xhc3MgUGllY2VGYWN0b3J5IHtcclxuXHJcbiAgICBzdGF0aWMgY3JlYXRlKFxyXG4gICAgICAgIGluZGV4ZXM6IE1vdmVUcmFuc2xhdGlvbixcclxuICAgICAgICBwaWVjZVR5cGVJbnB1dDogUGllY2VUeXBlSW5wdXQsXHJcbiAgICAgICAgY29sb3JJbnB1dDogQ29sb3JJbnB1dCxcclxuICAgICAgICBib2FyZDogQm9hcmRcclxuICAgICk6IFBpZWNlIHtcclxuICAgICAgICBsZXQgcGllY2U7XHJcbiAgICAgICAgbGV0IGNvbG9yID0gY29sb3JJbnB1dCA9PT0gQ29sb3JJbnB1dC5MSUdIVFxyXG4gICAgICAgICAgICA/IENvbG9yLldISVRFXHJcbiAgICAgICAgICAgIDogQ29sb3IuQkxBQ0s7XHJcblxyXG4gICAgICAgIHN3aXRjaCAocGllY2VUeXBlSW5wdXQpIHtcclxuICAgICAgICAgICAgY2FzZSBQaWVjZVR5cGVJbnB1dC5RVUVFTjpcclxuICAgICAgICAgICAgICAgIHBpZWNlID0gbmV3IFF1ZWVuKFxyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBQb2ludChpbmRleGVzLnlBeGlzLCBpbmRleGVzLnhBeGlzKSxcclxuICAgICAgICAgICAgICAgICAgICBjb2xvcixcclxuICAgICAgICAgICAgICAgICAgICBjb2xvciA9PT0gQ29sb3IuV0hJVEUgPyBVbmljb2RlQ29uc3RhbnRzLldISVRFX1FVRUVOIDogVW5pY29kZUNvbnN0YW50cy5CTEFDS19RVUVFTixcclxuICAgICAgICAgICAgICAgICAgICBib2FyZFxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFBpZWNlVHlwZUlucHV0LktJTkc6XHJcbiAgICAgICAgICAgICAgICBwaWVjZSA9IG5ldyBLaW5nKFxyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBQb2ludChpbmRleGVzLnlBeGlzLCBpbmRleGVzLnhBeGlzKSxcclxuICAgICAgICAgICAgICAgICAgICBjb2xvcixcclxuICAgICAgICAgICAgICAgICAgICBjb2xvciA9PT0gQ29sb3IuV0hJVEUgPyBVbmljb2RlQ29uc3RhbnRzLldISVRFX0tJTkcgOiBVbmljb2RlQ29uc3RhbnRzLkJMQUNLX0tJTkcsXHJcbiAgICAgICAgICAgICAgICAgICAgYm9hcmRcclxuICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgUGllY2VUeXBlSW5wdXQuS05JR0hUOlxyXG4gICAgICAgICAgICAgICAgcGllY2UgPSBuZXcgS25pZ2h0KFxyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBQb2ludChpbmRleGVzLnlBeGlzLCBpbmRleGVzLnhBeGlzKSxcclxuICAgICAgICAgICAgICAgICAgICBjb2xvcixcclxuICAgICAgICAgICAgICAgICAgICBjb2xvciA9PT0gQ29sb3IuV0hJVEUgPyBVbmljb2RlQ29uc3RhbnRzLldISVRFX0tOSUdIVCA6IFVuaWNvZGVDb25zdGFudHMuQkxBQ0tfS05JR0hULFxyXG4gICAgICAgICAgICAgICAgICAgIGJvYXJkXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgUGllY2VUeXBlSW5wdXQuQklTSE9QOlxyXG4gICAgICAgICAgICAgICAgcGllY2UgPSBuZXcgQmlzaG9wKFxyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBQb2ludChpbmRleGVzLnlBeGlzLCBpbmRleGVzLnhBeGlzKSxcclxuICAgICAgICAgICAgICAgICAgICBjb2xvcixcclxuICAgICAgICAgICAgICAgICAgICBjb2xvciA9PT0gQ29sb3IuV0hJVEUgPyBVbmljb2RlQ29uc3RhbnRzLldISVRFX0JJU0hPUCA6IFVuaWNvZGVDb25zdGFudHMuQkxBQ0tfQklTSE9QLFxyXG4gICAgICAgICAgICAgICAgICAgIGJvYXJkXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgUGllY2VUeXBlSW5wdXQuUk9PSzpcclxuICAgICAgICAgICAgICAgIHBpZWNlID0gbmV3IFJvb2soXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IFBvaW50KGluZGV4ZXMueUF4aXMsIGluZGV4ZXMueEF4aXMpLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yID09PSBDb2xvci5XSElURSA/IFVuaWNvZGVDb25zdGFudHMuV0hJVEVfUk9PSyA6IFVuaWNvZGVDb25zdGFudHMuQkxBQ0tfUk9PSyxcclxuICAgICAgICAgICAgICAgICAgICBib2FyZFxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFBpZWNlVHlwZUlucHV0LlBBV046XHJcbiAgICAgICAgICAgICAgICBwaWVjZSA9IG5ldyBQYXduKFxyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBQb2ludChpbmRleGVzLnlBeGlzLCBpbmRleGVzLnhBeGlzKSxcclxuICAgICAgICAgICAgICAgICAgICBjb2xvcixcclxuICAgICAgICAgICAgICAgICAgICBjb2xvciA9PT0gQ29sb3IuV0hJVEUgPyBVbmljb2RlQ29uc3RhbnRzLldISVRFX1BBV04gOiBVbmljb2RlQ29uc3RhbnRzLkJMQUNLX1BBV04sXHJcbiAgICAgICAgICAgICAgICAgICAgYm9hcmRcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBwaWVjZTtcclxuICAgIH1cclxufVxyXG4iXX0=