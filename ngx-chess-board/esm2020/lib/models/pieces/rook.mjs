import { Color } from './color';
import { King } from './king';
import { Piece } from './piece';
import { Point } from './point';
export class Rook extends Piece {
    constructor(point, color, constant, board) {
        super(point, color, constant, 5, board);
        this.isMovedAlready = false;
    }
    getPossibleMoves() {
        const possiblePoints = [];
        const row = this.point.row;
        const col = this.point.col;
        for (let i = row + 1; i < 8; ++i) {
            // dol
            if (this.board.isFieldEmpty(i, col)) {
                possiblePoints.push(new Point(i, col));
            }
            else {
                break;
            }
        }
        for (let i = row - 1; i >= 0; --i) {
            // gora
            if (this.board.isFieldEmpty(i, col)) {
                possiblePoints.push(new Point(i, col));
            }
            else {
                break;
            }
        }
        for (let j = col - 1; j >= 0; --j) {
            // lewo
            if (this.board.isFieldEmpty(row, j)) {
                possiblePoints.push(new Point(row, j));
            }
            else {
                break;
            }
        }
        for (let j = col + 1; j < 8; ++j) {
            // prawo
            if (this.board.isFieldEmpty(row, j)) {
                possiblePoints.push(new Point(row, j));
            }
            else {
                break;
            }
        }
        return possiblePoints;
    }
    getPossibleCaptures() {
        const possiblePoints = [];
        const row = this.point.row;
        const col = this.point.col;
        for (let i = row + 1; i < 8; ++i) {
            // dol
            if (this.board.isFieldTakenByEnemy(i, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
                possiblePoints.push(new Point(i, col));
                break;
            }
            else {
                if (!this.board.isFieldEmpty(i, col)) {
                    break;
                }
            }
        }
        for (let i = row - 1; i >= 0; --i) {
            // gora
            if (this.board.isFieldTakenByEnemy(i, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
                possiblePoints.push(new Point(i, col));
                break;
            }
            else {
                if (!this.board.isFieldEmpty(i, col)) {
                    break;
                }
            }
        }
        for (let j = col - 1; j >= 0; --j) {
            // lewo
            if (this.board.isFieldTakenByEnemy(row, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
                possiblePoints.push(new Point(row, j));
                break;
            }
            else {
                if (!this.board.isFieldEmpty(row, j)) {
                    break;
                }
            }
        }
        for (let j = col + 1; j < 8; ++j) {
            // prawo
            if (this.board.isFieldTakenByEnemy(row, j, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
                possiblePoints.push(new Point(row, j));
                break;
            }
            else {
                if (!this.board.isFieldEmpty(row, j)) {
                    break;
                }
            }
        }
        return possiblePoints;
    }
    getCoveredFields() {
        const possiblePoints = [];
        const row = this.point.row;
        const col = this.point.col;
        for (let i = row + 1; i < 8; ++i) {
            // dol
            if (this.board.isFieldEmpty(i, col)) {
                possiblePoints.push(new Point(i, col));
            }
            else {
                if (!(this.board.getPieceByField instanceof King)) {
                    possiblePoints.push(new Point(i, col));
                    break;
                }
            }
        }
        for (let i = row - 1; i >= 0; --i) {
            // gora
            if (this.board.isFieldEmpty(i, col)) {
                possiblePoints.push(new Point(i, col));
            }
            else {
                if (!(this.board.getPieceByField instanceof King)) {
                    possiblePoints.push(new Point(i, col));
                    break;
                }
            }
        }
        for (let j = col - 1; j >= 0; --j) {
            // lewo
            if (this.board.isFieldEmpty(row, j)) {
                possiblePoints.push(new Point(row, j));
            }
            else {
                if (!(this.board.getPieceByField instanceof King)) {
                    possiblePoints.push(new Point(row, j));
                    break;
                }
            }
        }
        for (let j = col + 1; j < 8; ++j) {
            // prawo
            if (this.board.isFieldEmpty(row, j)) {
                possiblePoints.push(new Point(row, j));
            }
            else {
                if (!(this.board.getPieceByField instanceof King)) {
                    possiblePoints.push(new Point(row, j));
                    break;
                }
            }
        }
        return possiblePoints;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9vay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1jaGVzcy1ib2FyZC9zcmMvbGliL21vZGVscy9waWVjZXMvcm9vay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ2hDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDOUIsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNoQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRWhDLE1BQU0sT0FBTyxJQUFLLFNBQVEsS0FBSztJQUczQixZQUNJLEtBQVksRUFDWixLQUFZLEVBQ1osUUFBdUIsRUFDdkIsS0FBWTtRQUVaLEtBQUssQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFSNUMsbUJBQWMsR0FBRyxLQUFLLENBQUM7SUFTdkIsQ0FBQztJQUVELGdCQUFnQjtRQUNaLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQztRQUUxQixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztRQUMzQixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztRQUUzQixLQUFLLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtZQUM5QixNQUFNO1lBQ04sSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUU7Z0JBQ2pDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDMUM7aUJBQU07Z0JBQ0gsTUFB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SUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN2QyxNQUFNO2lCQUNUO2FBQ0o7U0FDSjtRQUVELE9BQU8sY0FBYyxDQUFDO0lBQzFCLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpZWNlQ29uc3RhbnQgfSBmcm9tICcuLi8uLi91dGlscy91bmljb2RlLWNvbnN0YW50cyc7XHJcbmltcG9ydCB7IEJvYXJkIH0gZnJvbSAnLi4vYm9hcmQnO1xyXG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJy4vY29sb3InO1xyXG5pbXBvcnQgeyBLaW5nIH0gZnJvbSAnLi9raW5nJztcclxuaW1wb3J0IHsgUGllY2UgfSBmcm9tICcuL3BpZWNlJztcclxuaW1wb3J0IHsgUG9pbnQgfSBmcm9tICcuL3BvaW50JztcclxuXHJcbmV4cG9ydCBjbGFzcyBSb29rIGV4dGVuZHMgUGllY2Uge1xyXG4gICAgaXNNb3ZlZEFscmVhZHkgPSBmYWxzZTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwb2ludDogUG9pbnQsXHJcbiAgICAgICAgY29sb3I6IENvbG9yLFxyXG4gICAgICAgIGNvbnN0YW50OiBQaWVjZUNvbnN0YW50LFxyXG4gICAgICAgIGJvYXJkOiBCb2FyZFxyXG4gICAgKSB7XHJcbiAgICAgICAgc3VwZXIocG9pbnQsIGNvbG9yLCBjb25zdGFudCwgNSwgYm9hcmQpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFBvc3NpYmxlTW92ZXMoKTogUG9pbnRbXSB7XHJcbiAgICAgICAgY29uc3QgcG9zc2libGVQb2ludHMgPSBbXTtcclxuXHJcbiAgICAgICAgY29uc3Qgcm93ID0gdGhpcy5wb2ludC5yb3c7XHJcbiAgICAgICAgY29uc3QgY29sID0gdGhpcy5wb2ludC5jb2w7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSByb3cgKyAxOyBpIDwgODsgKytpKSB7XHJcbiAgICAgICAgICAgIC8vIGRvbFxyXG4gICAgICAgICAgICBpZiAodGhpcy5ib2FyZC5pc0ZpZWxkRW1wdHkoaSwgY29sKSkge1xyXG4gICAgICAgICAgICAgICAgcG9zc2libGVQb2ludHMucHVzaChuZXcgUG9pbnQoaSwgY29sKSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IHJvdyAtIDE7IGkgPj0gMDsgLS1pKSB7XHJcbiAgICAgICAgICAgIC8vIGdvcmFcclxuICAgICAgICAgICAgaWYgKHRoaXMuYm9hcmQuaXNGaWVsZEVtcHR5KGksIGNvbCkpIHtcclxuICAgICAgICAgICAgICAgIHBvc3NpYmxlUG9pbnRzLnB1c2gobmV3IFBvaW50KGksIGNvbCkpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IGogPSBjb2wgLSAxOyBqID49IDA7IC0taikge1xyXG4gICAgICAgICAgICAvLyBsZXdvXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmJvYXJkLmlzRmllbGRFbXB0eShyb3csIGopKSB7XHJcbiAgICAgICAgICAgICAgICBwb3NzaWJsZVBvaW50cy5wdXNoKG5ldyBQb2ludChyb3csIGopKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCBqID0gY29sICsgMTsgaiA8IDg7ICsraikge1xyXG4gICAgICAgICAgICAvLyBwcmF3b1xyXG4gICAgICAgICAgICBpZiAodGhpcy5ib2FyZC5pc0ZpZWxkRW1wdHkocm93LCBqKSkge1xyXG4gICAgICAgICAgICAgICAgcG9zc2libGVQb2ludHMucHVzaChuZXcgUG9pbnQocm93LCBqKSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHBvc3NpYmxlUG9pbnRzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFBvc3NpYmxlQ2FwdHVyZXMoKTogUG9pbnRbXSB7XHJcbiAgICAgICAgY29uc3QgcG9zc2libGVQb2ludHMgPSBbXTtcclxuXHJcbiAgICAgICAgY29uc3Qgcm93ID0gdGhpcy5wb2ludC5yb3c7XHJcbiAgICAgICAgY29uc3QgY29sID0gdGhpcy5wb2ludC5jb2w7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSByb3cgKyAxOyBpIDwgODsgKytpKSB7XHJcbiAgICAgICAgICAgIC8vIGRvbFxyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICB0aGlzLmJvYXJkLmlzRmllbGRUYWtlbkJ5RW5lbXkoXHJcbiAgICAgICAgICAgICAgICAgICAgaSxcclxuICAgICAgICAgICAgICAgICAgICBjb2wsXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2xvciA9PT0gQ29sb3IuV0hJVEUgPyBDb2xvci5CTEFDSyA6IENvbG9yLldISVRFXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgcG9zc2libGVQb2ludHMucHVzaChuZXcgUG9pbnQoaSwgY29sKSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5ib2FyZC5pc0ZpZWxkRW1wdHkoaSwgY29sKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gcm93IC0gMTsgaSA+PSAwOyAtLWkpIHtcclxuICAgICAgICAgICAgLy8gZ29yYVxyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICB0aGlzLmJvYXJkLmlzRmllbGRUYWtlbkJ5RW5lbXkoXHJcbiAgICAgICAgICAgICAgICAgICAgaSxcclxuICAgICAgICAgICAgICAgICAgICBjb2wsXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2xvciA9PT0gQ29sb3IuV0hJVEUgPyBDb2xvci5CTEFDSyA6IENvbG9yLldISVRFXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgcG9zc2libGVQb2ludHMucHVzaChuZXcgUG9pbnQoaSwgY29sKSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5ib2FyZC5pc0ZpZWxkRW1wdHkoaSwgY29sKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCBqID0gY29sIC0gMTsgaiA+PSAwOyAtLWopIHtcclxuICAgICAgICAgICAgLy8gbGV3b1xyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICB0aGlzLmJvYXJkLmlzRmllbGRUYWtlbkJ5RW5lbXkoXHJcbiAgICAgICAgICAgICAgICAgICAgcm93LFxyXG4gICAgICAgICAgICAgICAgICAgIGosXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2xvciA9PT0gQ29sb3IuV0hJVEUgPyBDb2xvci5CTEFDSyA6IENvbG9yLldISVRFXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgcG9zc2libGVQb2ludHMucHVzaChuZXcgUG9pbnQocm93LCBqKSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5ib2FyZC5pc0ZpZWxkRW1wdHkocm93LCBqKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCBqID0gY29sICsgMTsgaiA8IDg7ICsraikge1xyXG4gICAgICAgICAgICAvLyBwcmF3b1xyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICB0aGlzLmJvYXJkLmlzRmllbGRUYWtlbkJ5RW5lbXkoXHJcbiAgICAgICAgICAgICAgICAgICAgcm93LFxyXG4gICAgICAgICAgICAgICAgICAgIGosXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2xvciA9PT0gQ29sb3IuV0hJVEUgPyBDb2xvci5CTEFDSyA6IENvbG9yLldISVRFXHJcbiAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgcG9zc2libGVQb2ludHMucHVzaChuZXcgUG9pbnQocm93LCBqKSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5ib2FyZC5pc0ZpZWxkRW1wdHkocm93LCBqKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcG9zc2libGVQb2ludHM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q292ZXJlZEZpZWxkcygpOiBQb2ludFtdIHtcclxuICAgICAgICBjb25zdCBwb3NzaWJsZVBvaW50cyA9IFtdO1xyXG5cclxuICAgICAgICBjb25zdCByb3cgPSB0aGlzLnBvaW50LnJvdztcclxuICAgICAgICBjb25zdCBjb2wgPSB0aGlzLnBvaW50LmNvbDtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IHJvdyArIDE7IGkgPCA4OyArK2kpIHtcclxuICAgICAgICAgICAgLy8gZG9sXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmJvYXJkLmlzRmllbGRFbXB0eShpLCBjb2wpKSB7XHJcbiAgICAgICAgICAgICAgICBwb3NzaWJsZVBvaW50cy5wdXNoKG5ldyBQb2ludChpLCBjb2wpKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICghKHRoaXMuYm9hcmQuZ2V0UGllY2VCeUZpZWxkIGluc3RhbmNlb2YgS2luZykpIHtcclxuICAgICAgICAgICAgICAgICAgICBwb3NzaWJsZVBvaW50cy5wdXNoKG5ldyBQb2ludChpLCBjb2wpKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IHJvdyAtIDE7IGkgPj0gMDsgLS1pKSB7XHJcbiAgICAgICAgICAgIC8vIGdvcmFcclxuICAgICAgICAgICAgaWYgKHRoaXMuYm9hcmQuaXNGaWVsZEVtcHR5KGksIGNvbCkpIHtcclxuICAgICAgICAgICAgICAgIHBvc3NpYmxlUG9pbnRzLnB1c2gobmV3IFBvaW50KGksIGNvbCkpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKCEodGhpcy5ib2FyZC5nZXRQaWVjZUJ5RmllbGQgaW5zdGFuY2VvZiBLaW5nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc3NpYmxlUG9pbnRzLnB1c2gobmV3IFBvaW50KGksIGNvbCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCBqID0gY29sIC0gMTsgaiA+PSAwOyAtLWopIHtcclxuICAgICAgICAgICAgLy8gbGV3b1xyXG4gICAgICAgICAgICBpZiAodGhpcy5ib2FyZC5pc0ZpZWxkRW1wdHkocm93LCBqKSkge1xyXG4gICAgICAgICAgICAgICAgcG9zc2libGVQb2ludHMucHVzaChuZXcgUG9pbnQocm93LCBqKSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoISh0aGlzLmJvYXJkLmdldFBpZWNlQnlGaWVsZCBpbnN0YW5jZW9mIEtpbmcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zc2libGVQb2ludHMucHVzaChuZXcgUG9pbnQocm93LCBqKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IGogPSBjb2wgKyAxOyBqIDwgODsgKytqKSB7XHJcbiAgICAgICAgICAgIC8vIHByYXdvXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmJvYXJkLmlzRmllbGRFbXB0eShyb3csIGopKSB7XHJcbiAgICAgICAgICAgICAgICBwb3NzaWJsZVBvaW50cy5wdXNoKG5ldyBQb2ludChyb3csIGopKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICghKHRoaXMuYm9hcmQuZ2V0UGllY2VCeUZpZWxkIGluc3RhbmNlb2YgS2luZykpIHtcclxuICAgICAgICAgICAgICAgICAgICBwb3NzaWJsZVBvaW50cy5wdXNoKG5ldyBQb2ludChyb3csIGopKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHBvc3NpYmxlUG9pbnRzO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==